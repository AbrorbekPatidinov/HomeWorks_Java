Каждый класс массивов имеет свои преимущества и недостатки, которые следует учитывать при выборе наиболее подходящего для конкретной задачи.
Рассмотрим преимущества и недостатки каждого класса массивов, а также в каких случаях лучше выбрать один класс массивов, а не другой.

1. Array

   Преимущества:
   - Доступ к элементам массива осуществляется при помощи индекса, что делает его быстрее чем связный список в большинстве случаев.
   - Память для массива выделяется единоразово при создании, что упрощает управление памятью и уменьшает накладные расходы
   на выделение памяти.

   Недостатки:
   - Размер массива не может быть изменен после создания, поэтому для увеличения его размера приходится создавать
   новый массив и копировать в него данные из старого массива.
   - Если выделенная память не используется, она будет занимать место в памяти.

   Когда следует использовать: массивы в основном используют для хранения данных, когда нужен прямой доступ к
   элементам массива по индексу. Рекомендуется использовать массивы при хранении небольших количеств данных или для хранения элементов,
    которые меняются редко.

2. ArrayList

   Преимущества:
   - Размер ArrayList может быть увеличен или уменьшен динамически во время выполнения программы, в отличие от обычных массивов.
   - ArrayList позволяет быстро добавлять, удалять, искать элементы, а также производить операции со многими элементами одновременно.

   Недостатки:
   - Если ArrayList заполнен на 75 % – 85%, то добавление новых элементов может быть замедлено из-за необходимости увеличения
   размера списока с переносом элементов в новое место.
   - Доступ к элементу по индексу в ArrayList медленнее, чем в обычных массивах.

   Когда следует использовать: рекомендуется использовать ArrayList в большинстве случаев, когда требуется динамически изменяемый массив.

3. LinkedList

   Преимущества:
   - Добавление и удаление элементов в LinkedList выполняется быстрее, чем в ArrayList, поскольку элементы LinkedList не нужно копировать,
   чтобы освободить или добавить новые элементы.
   - Обращение к элементам по индексу не требуется и не замедляет работу программы.

   Недостатки:
   - Получение элементов в LinkedList медленнее, чем вделать это при помощи массива.
   - LinkedList требует больше памяти, чем ArrayList, поскольку она хранит указатели на следующие и предыдущие элементы в каждом узле списка.

   Когда следует использовать: LinkedList следует использовать в тех случаях,
   где требуется многократное добавление или удаление элементов при сохранении порядка элементов в коллекции.

4. Vector

   Преимущества:
   - Vector выполняет потокобезопасную работу с их элементами.
   - Если вам нужно использовать элемент многократно, вы можете обратиться к определенному элементу или он будет сохранен в кэше памяти.

   Недостатки:
   - Векторы могут работать очень медленно, если их нужно изменять многократно.
   - Vector содержит много синхронизации, что может замедлять работу программы.

   Когда следует использовать: рекомендуется использовать Vector при работе с коллекциями в многопоточном окружении,
    когда требуется потокобезопасный доступ к элементам.

5. Stack

    Преимущества:
   - Stack может быть использован для рекурсивных алгоритмов и приложений, которые работают только с последним добавленным элементом.
   - Методы push() и pop() быстро и эффективно управляют элементами в стеке.

   Недостатки:
   - Stack может быть неэффективен при условии